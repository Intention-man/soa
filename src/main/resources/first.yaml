openapi: 3.0.3
info:
  title: Route Management Service API
  description: |
    RESTful веб-сервис для управления коллекцией маршрутов.
    
    ## Основные возможности:
    - CRUD операции над маршрутами
    - Расширенная фильтрация и сортировка
    - Постраничная навигация
    - Аналитические операции над коллекцией
    
    ## Формат данных:
    Все данные передаются в формате XML
    
    ## Валидация:
    Сервис проверяет все ограничения целостности и возвращает соответствующие коды ошибок
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost:8080/api/v1
    description: Локальный сервер разработки
  - url: http://helios:8080/api/v1
    description: Продуктивный сервер

tags:
  - name: Routes CRUD
    description: Базовые операции с маршрутами (создание, чтение, обновление, удаление)
  - name: Routes Analytics
    description: Аналитические операци и над коллекцией маршрутов

paths:
  /routes:
    get:
      tags:
        - Routes CRUD
      summary: Получить список маршрутов
      description: |
        Возвращает список маршрутов с поддержкой:
        - **Фильтрации** по любым полям объекта
        - **Сортировки** по одному или нескольким полям
        - **Постраничного вывода** результатов
        
        ### Примеры использования:
        - `/routes?page=0&size=10` - первая страница, 10 элементов
        - `/routes?sort=distance,asc&sort=name,desc` - сортировка по distance по возрастанию, затем по name по убыванию
        - `/routes?filter.distance.min=100&filter.distance.max=500` - маршруты с дистанцией от 100 до 500
        - `/routes?filter.fromName=Москва&filter.toName=Санкт-Петербург` - маршруты из Москвы в Санкт-Петербург
      operationId: getRoutes
      parameters:
        # Параметры пагинации
        - name: page
          in: query
          description: Номер страницы (нумерация начинается с 0)
          schema:
            type: integer
            minimum: 0
            default: 0
          example: 0
        - name: size
          in: query
          description: Количество элементов на странице
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          example: 20

        # Параметры сортировки
        - name: sort
          in: query
          description: |
            Параметры сортировки в формате: `field,direction`.
            Можно указать несколько параметров для многоуровневой сортировки.
            
            **Доступные поля:**
            - `id` - идентификатор
            - `name` - название
            - `distance` - дистанция
            - `creationDate` - дата создания
            - `coordinatesX` - координата X
            - `coordinatesY` - координата Y
            - `fromX` - X начальной точки
            - `fromY` - Y начальной точки
            - `fromName` - название начальной точки
            - `toX` - X конечной точки
            - `toY` - Y конечной точки
            - `toName` - название конечной точки
            
            **Направления:**
            - `asc` - по возрастанию
            - `desc` - по убыванию
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              pattern: '^[a-zA-Z.]+,(asc|desc)$'
          examples:
            single:
              summary: Одиночная сортировка
              value: ["distance,asc"]
            multiple:
              summary: Множественная сортировка
              value: ["distance,asc", "name,desc"]

        # Параметры фильтрации

        # ID (Long, целое число)
        - name: filter.id.equals
          in: query
          description: Фильтр по точному значению ID
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 42

        - name: filter.id.gt
          in: query
          description: ID больше указанного значения (>)
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 10

        - name: filter.id.gte
          in: query
          description: ID больше или равно указанному значению (≥)
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 10

        - name: filter.id.lt
          in: query
          description: ID меньше указанного значения (<)
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 100

        - name: filter.id.lte
          in: query
          description: ID меньше или равно указанному значению (≤)
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 100

        # name (String)
        - name: filter.name.equals
          in: query
          description: Точное совпадение по названию
          schema:
            type: string
            minLength: 1
          example: "Москва"

        - name: filter.name.contains
          in: query
          description: Поиск по подстроке в названии (регистронезависимый)
          schema:
            type: string
            minLength: 1
          example: "Моск"

        # distance (double)
        - name: filter.distance.equals
          in: query
          description: Точное значение дистанции
          schema:
            type: number
            format: double
            minimum: 1.01
          example: 500.0

        - name: filter.distance.gt
          in: query
          description: Дистанция больше указанного значения (>)
          schema:
            type: number
            format: double
            minimum: 1.01
          example: 100.0

        - name: filter.distance.gte
          in: query
          description: Дистанция больше или равна указанному значению (≥)
          schema:
            type: number
            format: double
            minimum: 1.01
          example: 100.0

        - name: filter.distance.lt
          in: query
          description: Дистанция меньше указанного значения (<)
          schema:
            type: number
            format: double
            minimum: 1.01
          example: 1000.0

        - name: filter.distance.lte
          in: query
          description: Дистанция меньше или равна указанному значению (≤)
          schema:
            type: number
            format: double
            minimum: 1.01
          example: 1000.0

        # creationDate (LocalDateTime, ISO 8601)
        - name: filter.creationDate.equals
          in: query
          description: Точная дата создания
          schema:
            type: string
            format: date-time
          example: "2024-01-15T10:30:00"

        - name: filter.creationDate.gt
          in: query
          description: Дата создания позже указанной (>)
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00"

        - name: filter.creationDate.gte
          in: query
          description: Дата создания позже или равна указанной (≥)
          schema:
            type: string
            format: date-time
          example: "2024-01-01T00:00:00"

        - name: filter.creationDate.lt
          in: query
          description: Дата создания раньше указанной (<)
          schema:
            type: string
            format: date-time
          example: "2024-12-31T23:59:59"

        - name: filter.creationDate.lte
          in: query
          description: Дата создания раньше или равна указанной (≤)
          schema:
            type: string
            format: date-time
          example: "2024-12-31T23:59:59"

        # coordinates.x (int)
        - name: filter.coordinatesX.equals
          in: query
          description: Координата X ровно равна
          schema:
            type: integer
          example: 100

        - name: filter.coordinatesX.gt
          in: query
          description: Координата X больше (>)
          schema:
            type: integer
          example: 50

        - name: filter.coordinatesX.gte
          in: query
          description: Координата X больше или равна (≥)
          schema:
            type: integer
            example: 50

        - name: filter.coordinatesX.lt
          in: query
          description: Координата X меньше (<)
          schema:
            type: integer
            example: 150

        - name: filter.coordinatesX.lte
          in: query
          description: Координата X меньше или равна (≤)
          schema:
            type: integer
            example: 150

        # coordinates.y (Long)
        - name: filter.coordinatesY.equals
          in: query
          description: Координата Y ровно равна
          schema:
            type: integer
            format: int64
          example: 200

        - name: filter.coordinatesY.gt
          in: query
          description: Координата Y больше (>)
          schema:
            type: integer
            format: int64
          example: 100

        - name: filter.coordinatesY.gte
          in: query
          description: Координата Y больше или равна (≥)
          schema:
            type: integer
            format: int64
          example: 100

        - name: filter.coordinatesY.lt
          in: query
          description: Координата Y меньше (<)
          schema:
            type: integer
            format: int64
          example: 300

        - name: filter.coordinatesY.lte
          in: query
          description: Координата Y меньше или равна (≤)
          schema:
            type: integer
            format: int64
          example: 300

        # from.x (Integer)
        - name: filter.fromX.equals
          in: query
          description: X координата начальной локации равна
          schema:
            type: integer
          example: 55

        - name: filter.fromX.gt
          in: query
          description: X координата начальной локации больше (>)
          schema:
            type: integer
          example: 50

        - name: filter.fromX.gte
          in: query
          description: X координата начальной локации больше или равна (≥)
          schema:
            type: integer
          example: 50

        - name: filter.fromX.lt
          in: query
          description: X координата начальной локации меньше (<)
          schema:
            type: integer
          example: 60

        - name: filter.fromX.lte
          in: query
          description: X координата начальной локации меньше или равна (≤)
          schema:
            type: integer
          example: 60

        # from.y (long)
        - name: filter.fromY.equals
          in: query
          description: Y координата начальной локации равна
          schema:
            type: integer
            format: int64
          example: 37

        - name: filter.fromY.gt
          in: query
          description: Y координата начальной локации больше (>)
          schema:
            type: integer
            format: int64
          example: 30

        - name: filter.fromY.gte
          in: query
          description: Y координата начальной локации больше или равна (≥)
          schema:
            type: integer
            format: int64
          example: 30

        - name: filter.fromY.lt
          in: query
          description: Y координата начальной локации меньше (<)
          schema:
            type: integer
            format: int64
          example: 40

        - name: filter.fromY.lte
          in: query
          description: Y координата начальной локации меньше или равна (≤)
          schema:
            type: integer
            format: int64
          example: 40

        # from.name (String)
        - name: filter.fromName.equals
          in: query
          description: Точное совпадение названия начальной локации
          schema:
            type: string
            minLength: 1
          example: "Москва"

        - name: filter.fromName.contains
          in: query
          description: Поиск подстроки в названии начальной локации
          schema:
            type: string
            minLength: 1
          example: "Моск"

        # to.x (Long)
        - name: filter.toX.equals
          in: query
          description: X координата конечной локации равна
          schema:
            type: integer
            format: int64
          example: 59

        - name: filter.toX.gt
          in: query
          description: X координата конечной локации больше (>)
          schema:
            type: integer
            format: int64
          example: 50

        - name: filter.toX.gte
          in: query
          description: X координата конечной локации больше или равна (≥)
          schema:
            type: integer
            format: int64
          example: 50

        - name: filter.toX.lt
          in: query
          description: X координата конечной локации меньше (<)
          schema:
            type: integer
            format: int64
          example: 60

        - name: filter.toX.lte
          in: query
          description: X координата конечной локации меньше или равна (≤)
          schema:
            type: integer
            format: int64
          example: 60

        # to.y (int)
        - name: filter.toY.equals
          in: query
          description: Y координата конечной локации равна
          schema:
            type: integer
          example: 30

        - name: filter.toY.gt
          in: query
          description: Y координата конечной локации больше (>)
          schema:
            type: integer
          example: 20

        - name: filter.toY.gte
          in: query
          description: Y координата конечной локации больше или равна (≥)
          schema:
            type: integer
            example: 20

        - name: filter.toY.lt
          in: query
          description: Y координата конечной локации меньше (<)
          schema:
            type: integer
            example: 40

        - name: filter.toY.lte
          in: query
          description: Y координата конечной локации меньше или равна (≤)
          schema:
            type: integer
            example: 40

        # to.name (String)
        - name: filter.toName.equals
          in: query
          description: Точное совпадение названия конечной локации
          schema:
            type: string
            minLength: 1
          example: "Санкт-Петербург"

        - name: filter.toName.contains
          in: query
          description: Поиск подстроки в названии конечной локации
          schema:
            type: string
            minLength: 1
          example: "Петербург"

      responses:
        '200':
          description: Успешное получение списка маршрутов
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/RouteListResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <RouteListResponse>
                  <routes>
                    <route>
                      <id>1</id>
                      <name>Маршрут Москва-СПб</name>
                      <coordinates>
                        <x>100</x>
                        <y>200</y>
                      </coordinates>
                      <creationDate>2024-01-15T10:30:00</creationDate>
                      <fromLocation>
                        <x>55</x>
                        <y>37</y>
                        <name>Москва</name>
                      </fromLocation>
                      <toLocation>
                        <x>59</x>
                        <y>30</y>
                        <name>Санкт-Петербург</name>
                      </toLocation>
                      <distance>650.5</distance>
                    </route>
                  </routes>
                  <totalElements>100</totalElements>
                  <totalPages>5</totalPages>
                  <currentPage>0</currentPage>
                  <pageSize>20</pageSize>
                </RouteListResponse>

        '400':
          description: Некорректные параметры запроса
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>400</code>
                  <message>Некорректные параметры запроса</message>
                  <timestamp>2024-01-15T10:30:00</timestamp>
                  <details>
                    <detail>Параметр 'size' должен быть от 1 до 100</detail>
                    <detail>Неверный формат параметра сортировки</detail>
                  </details>
                </ErrorResponse>

        '500':
          description: |
            Внутренняя ошибка сервера.
            
            Возможные причины:
            - Недоступен первый сервис
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось получить маршруты: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>
    post:
      tags:
        - Routes CRUD
      summary: Создать новый маршрут
      description: |
        Создает новый маршрут в коллекции.
        
        **Автоматически генерируемые поля:**
        - `id` - уникальный идентификатор
        - `creationDate` - дата и время создания
        
        **Валидация:**
        - `name` не может быть null или пустым
        - `coordinates` не может быть null
        - `fromLocation` не может быть null
        - `toLocation` не может быть null
        - `distance` должна быть больше 1
        - Все обязательные поля должны быть заполнены
      operationId: createRoute
      requestBody:
        description: Данные нового маршрута
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteCreateRequest'
            example: |
              <?xml version="1.0" encoding="UTF-8"?>
              <RouteCreateRequest>
                <name>Новый маршрут</name>
                <coordinates>
                  <x>100</x>
                  <y>200</y>
                </coordinates>
                <fromLocation>
                  <x>55</x>
                  <y>37</y>
                  <name>Москва</name>
                </fromLocation>
                <toLocation>
                  <x>59</x>
                  <y>30</y>
                  <name>Санкт-Петербург</name>
                </toLocation>
                <distance>650.5</distance>
              </RouteCreateRequest>

      responses:
        '201':
          description: Маршрут успешно создан
          headers:
            Location:
              description: URL созданного ресурса
              schema:
                type: string
              example: /routes/1
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'

        '400':
          description: |
            Невалидные данные. Возможные причины:
            - Отсутствуют обязательные поля
            - name пустое или null
            - distance меньше или равна 1
            - Некорректная структура XML
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>400</code>
                  <message>Ошибка валидации данных</message>
                  <timestamp>2024-01-15T10:30:00</timestamp>
                  <details>
                    <detail>Поле 'name' не может быть пустым</detail>
                    <detail>Значение поля 'distance' должно быть больше 1</detail>
                  </details>
                </ErrorResponse>
        '500':
          description: |
            Внутренняя ошибка сервера.
            
            Возможные причины:
            - Недоступен первый сервис
            - Ошибка при создании маршрута в первом сервисе
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось создать маршрут: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>

  /routes/{id}:
    get:
      tags:
        - Routes CRUD
      summary: Получить маршрут по ID
      description: Возвращает маршрут с указанным идентификатором
      operationId: getRouteById
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор маршрута
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1

      responses:
        '200':
          description: Маршрут найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'

        '400':
          description: Некорректный формат ID
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Маршрут с указанным ID не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>404</code>
                  <message>Маршрут не найден</message>
                  <timestamp>2024-01-15T10:30:00</timestamp>
                  <details>
                    <detail>Маршрут с ID=999 не существует</detail>
                  </details>
                </ErrorResponse>
        '500':
          description: |
            Внутренняя ошибка сервера.
            
            Возможные причины:
            - Недоступен первый сервис
            - Ошибка при поиске маршрута
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось найти маршрут: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>

    put:
      tags:
        - Routes CRUD
      summary: Обновить существующий маршрут
      description: |
        Полностью обновляет маршрут с указанным ID.
        
        **Важно:**
        - Поля `id` и `creationDate` изменить нельзя
        - Все обязательные поля должны быть указаны
        - Применяются те же правила валидации, что и при создании
      operationId: updateRoute
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор маршрута
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1

      requestBody:
        description: Обновленные данные маршрута
        required: true
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/RouteUpdateRequest'

      responses:
        '200':
          description: Маршрут успешно обновлен
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Route'

        '400':
          description: |
            Невалидные данные. Возможные причины:
            - Нарушены ограничения целостности
            - Некорректная структура данных
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Маршрут с указанным ID не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: |
            Внутренняя ошибка сервера.

            Возможные причины:
            - Недоступен первый сервис
            - Ошибка при обновлении маршрута в первом сервисе
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось обновить маршрут: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>

    delete:
      tags:
        - Routes CRUD
      summary: Удалить маршрут
      description: Удаляет маршрут из коллекции по указанному ID
      operationId: deleteRoute
      parameters:
        - name: id
          in: path
          required: true
          description: Уникальный идентификатор маршрута
          schema:
            type: integer
            format: int64
            minimum: 1
          example: 1

      responses:
        '204':
          description: Маршрут успешно удален (No Content)

        '400':
          description: Некорректный формат ID
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '404':
          description: Маршрут с указанным ID не найден
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: |
            Внутренняя ошибка сервера.

            Возможные причины:
            - Недоступен первый сервис
            - Ошибка при удалении маршрута в первом сервисе
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось удалить маршрут: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>

  /routes/distance/sum:
    get:
      tags:
        - Routes Analytics
      summary: Рассчитать сумму всех дистанций
      description: |
        Вычисляет сумму значений поля `distance` для всех маршрутов в коллекции.
        
        Возвращает:
        - Общую сумму дистанций
        - Количество маршрутов в расчете
        - Среднюю дистанцию
      operationId: getDistanceSum
      responses:
        '200':
          description: Расчет выполнен успешно
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DistanceSumResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <DistanceSumResponse>
                  <totalSum>15750.5</totalSum>
                  <routeCount>25</routeCount>
                  <averageDistance>630.02</averageDistance>
                  <minDistance>150.5</minDistance>
                  <maxDistance>1200.75</maxDistance>
                </DistanceSumResponse>


        '500':
          description: |
            Внутренняя ошибка сервера.
            
            Возможные причины:
            - Недоступен первый сервис
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось посчитать сумму: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>
  /routes/distance/group:
    get:
      tags:
        - Routes Analytics
      summary: Группировка маршрутов по дистанции
      description: |
        Группирует все маршруты по значению поля `distance` и возвращает количество элементов в каждой группе.
        
        Результат отсортирован по значению дистанции по возрастанию.
      operationId: groupByDistance
      responses:
        '200':
          description: Группировка выполнена успешно
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/DistanceGroupResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <DistanceGroupResponse>
                  <groups>
                    <group>
                      <distance>100.5</distance>
                      <count>3</count>
                      <percentage>12.5</percentage>
                    </group>
                    <group>
                      <distance>250.0</distance>
                      <count>5</count>
                      <percentage>20.8</percentage>
                    </group>
                    <group>
                      <distance>650.5</distance>
                      <count>10</count>
                      <percentage>41.7</percentage>
                    </group>
                  </groups>
                  <totalGroups>5</totalGroups>
                  <totalRoutes>24</totalRoutes>
                </DistanceGroupResponse>

        '500':
          description: |
            Внутренняя ошибка сервера.

            Возможные причины:
            - Недоступен первый сервис
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось выполнить группировку: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>
  /routes/distance/greater-than:
    get:
      tags:
        - Routes Analytics
      summary: Найти маршруты с дистанцией больше заданной
      description: |
        Возвращает массив маршрутов, у которых значение поля `distance` строго больше указанного значения.
        
        Результат отсортирован по дистанции по возрастанию.
      operationId: getRoutesWithDistanceGreaterThan
      parameters:
        - name: minDistance
          in: query
          required: true
          description: |
            Минимальное значение дистанции (не включительно).
            Будут возвращены маршруты с distance > minDistance
          schema:
            type: number
            format: double
            minimum: 1
          example: 500.0

      responses:
        '200':
          description: Маршруты найдены
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/FilteredRoutesResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <FilteredRoutesResponse>
                  <routes>
                    <route>
                      <id>5</id>
                      <name>Дальний маршрут</name>
                      <coordinates>
                        <x>150</x>
                        <y>250</y>
                      </coordinates>
                      <creationDate>2024-01-20T14:30:00</creationDate>
                      <fromLocation>
                        <x>55</x>
                        <y>37</y>
                        <name>Москва</name>
                      </fromLocation>
                      <toLocation>
                        <x>104</x>
                        <y>52</y>
                        <name>Иркутск</name>
                      </toLocation>
                      <distance>5042.0</distance>
                    </route>
                  </routes>
                  <count>15</count>
                  <minDistance>501.0</minDistance>
                  <maxDistance>5042.0</maxDistance>
                  <averageDistance>2150.5</averageDistance>
                </FilteredRoutesResponse>

        '400':
          description: |
            Некорректное значение параметра. Возможные причины:
            - minDistance не указан
            - minDistance меньше или равен 1
            - Некорректный формат числа
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: |
            Внутренняя ошибка сервера.

            Возможные причины:
            - Недоступен первый сервис
            - Непредвиденная ошибка обработки
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example: |
                <?xml version="1.0" encoding="UTF-8"?>
                <ErrorResponse>
                  <code>500</code>
                  <message>Внутренняя ошибка сервера</message>
                  <timestamp>2024-01-20T10:30:00</timestamp>
                  <path>/navigator/route/add/1/2/650.5</path>
                  <details>
                    <detail>Не удалось найти маршруты: сервис управления маршрутами недоступен</detail>
                  </details>
                </ErrorResponse>

components:
  schemas:
    Route:
      type: object
      xml:
        name: route
      description: Полная модель маршрута
      required:
        - id
        - name
        - coordinates
        - creationDate
        - fromLocation
        - toLocation
        - distance
      properties:
        id:
          type: integer
          format: int64
          description: |
            Уникальный идентификатор маршрута.
            Генерируется автоматически при создании.
          minimum: 1
          example: 1
        name:
          type: string
          description: Название маршрута
          minLength: 1
          maxLength: 255
          example: "Маршрут Москва-Санкт-Петербург"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date-time
          description: |
            Дата и время создания маршрута.
            Генерируется автоматически при создании.
          example: "2024-01-15T10:30:00"
        fromLocation:
          $ref: '#/components/schemas/FromLocation'
        toLocation:
          $ref: '#/components/schemas/ToLocation'
        distance:
          type: number
          format: double
          description: Дистанция маршрута в километрах
          minimum: 1.01
          example: 650.5

    RouteCreateRequest:
      type: object
      xml:
        name: RouteCreateRequest
      description: Модель для создания нового маршрута
      required:
        - name
        - coordinates
        - fromLocation
        - toLocation
        - distance
      properties:
        name:
          type: string
          description: Название маршрута
          minLength: 1
          maxLength: 255
          example: "Новый маршрут"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        fromLocation:
          $ref: '#/components/schemas/FromLocation'
        toLocation:
          $ref: '#/components/schemas/ToLocation'
        distance:
          type: number
          format: double
          description: Дистанция маршрута в километрах
          minimum: 1.01
          example: 650.5

    RouteUpdateRequest:
      type: object
      xml:
        name: RouteUpdateRequest
      description: Модель для обновления существующего маршрута
      required:
        - name
        - coordinates
        - fromLocation
        - toLocation
        - distance
      properties:
        name:
          type: string
          description: Название маршрута
          minLength: 1
          maxLength: 255
          example: "Обновленный маршрут"
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        fromLocation:
          $ref: '#/components/schemas/FromLocation'
        toLocation:
          $ref: '#/components/schemas/ToLocation'
        distance:
          type: number
          format: double
          description: Дистанция маршрута в километрах
          minimum: 1.01
          example: 750.0

    Coordinates:
      type: object
      xml:
        name: coordinates
      description: Координаты маршрута
      required:
        - x
        - y
      properties:
        x:
          type: integer
          format: int32
          description: Координата X
          example: 100
        y:
          type: integer
          format: int64
          description: Координата Y (не может быть null)
          example: 200

    FromLocation:
      type: object
      xml:
        name: fromLocation
      description: Описание начальной точки маршрута
      required:
        - x
        - y
        - name
      properties:
        x:
          type: integer
          format: int32
          description: Координата X начальной локации (не может быть null)
          example: 55
        y:
          type: integer
          format: int64
          description: Координата Y начальной локации
          example: 37
        name:
          type: string
          description: Название начальной локации (не может быть null)
          minLength: 1
          maxLength: 255
          example: "Москва"

    ToLocation:
      type: object
      xml:
        name: toLocation
      description: Описание конечной точки маршрута
      required:
        - x
        - y
        - name
      properties:
        x:
          type: integer
          format: int64
          description: Координата X конечной локации (не может быть null)
          example: 59
        y:
          type: integer
          format: int32
          description: Координата Y конечной локации
          example: 30
        name:
          type: string
          description: Название конечной локации (не может быть null или пустым)
          minLength: 1
          maxLength: 255
          example: "Санкт-Петербург"

    RouteListResponse:
      type: object
      xml:
        name: RouteListResponse
      description: Ответ со списком маршрутов и метаинформацией о пагинации
      properties:
        routes:
          type: array
          xml:
            wrapped: false
          items:
            $ref: '#/components/schemas/Route'
        totalElements:
          type: integer
          format: int64
          description: Общее количество элементов
          example: 100
        totalPages:
          type: integer
          description: Общее количество страниц
          example: 5
        currentPage:
          type: integer
          description: Номер текущей страницы
          example: 0
        pageSize:
          type: integer
          description: Размер страницы
          example: 20

    DistanceSumResponse:
      type: object
      xml:
        name: DistanceSumResponse
      description: Результат расчета суммы дистанций
      properties:
        totalSum:
          type: number
          format: double
          description: Общая сумма всех дистанций
          example: 15750.5
        routeCount:
          type: integer
          description: Количество маршрутов в расчете
          example: 25
        averageDistance:
          type: number
          format: double
          description: Средняя дистанция
          example: 630.02
        minDistance:
          type: number
          format: double
          description: Минимальная дистанция среди всех маршрутов
          example: 150.5
        maxDistance:
          type: number
          format: double
          description: Максимальная дистанция среди всех маршрутов
          example: 1200.75

    DistanceGroupResponse:
      type: object
      xml:
        name: DistanceGroupResponse
      description: Результат группировки маршрутов по дистанции
      properties:
        groups:
          type: array
          xml:
            wrapped: false
          items:
            type: object
            xml:
              name: group
            properties:
              distance:
                type: number
                format: double
                description: Значение дистанции для группы
                example: 650.5
              count:
                type: integer
                description: Количество маршрутов в группе
                example: 10
              percentage:
                type: number
                format: double
                description: Процент от общего количества маршрутов
                example: 41.7
        totalGroups:
          type: integer
          description: Общее количество групп
          example: 5
        totalRoutes:
          type: integer
          description: Общее количество маршрутов
          example: 24

    FilteredRoutesResponse:
      type: object
      xml:
        name: FilteredRoutesResponse
      description: Результат фильтрации маршрутов по дистанции
      properties:
        routes:
          type: array
          xml:
            wrapped: false
          items:
            $ref: '#/components/schemas/Route'
        count:
          type: integer
          description: Количество найденных маршрутов
          example: 15
        minDistance:
          type: number
          format: double
          description: Минимальная дистанция среди найденных маршрутов
          example: 501.0
        maxDistance:
          type: number
          format: double
          description: Максимальная дистанция среди найденных маршрутов
          example: 5042.0
        averageDistance:
          type: number
          format: double
          description: Средняя дистанция среди найденных маршрутов
          example: 2150.5

    ErrorResponse:
      type: object
      xml:
        name: ErrorResponse
      description: Модель ответа об ошибке
      properties:
        code:
          type: integer
          description: HTTP код ошибки
          example: 400
        message:
          type: string
          description: Общее описание ошибки
          example: "Ошибка валидации данных"
        timestamp:
          type: string
          format: date-time
          description: Время возникновения ошибки
          example: "2024-01-15T10:30:00"
        path:
          type: string
          description: Путь запроса, вызвавшего ошибку
          example: "/routes/999"
        details:
          type: array
          xml:
            wrapped: false
          items:
            type: string
            xml:
              name: detail
          description: Детальная информация об ошибках
          example:
            - "Поле 'name' не может быть пустым"
            - "Значение поля 'distance' должно быть больше 1"
